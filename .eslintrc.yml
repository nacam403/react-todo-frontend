env:
  browser: true
  es6: true
  mocha: true
plugins:
  - 'react'
  - 'flowtype'
extends:
  - 'eslint:recommended'
  - 'plugin:react/recommended'
  - 'plugin:flowtype/recommended'
  - 'plugin:prettier/recommended'
parser: 'babel-eslint'
parserOptions:
  ecmaVersion: 2017
  sourceType: module
  ecmaFeatures:
    impliedStrict: true
    jsx: true
    experimentalObjectRestSpread: true
settings:
  flowtype:
    onlyFilesWithFlowAnnotation: true

rules:
  # Possible Errors
  no-console: # consoleを使用したら・・・
    - warn # デフォルトはerrorだけどwarnに緩める。デバッグ用に一時的に使いたい時もあるから。

  # Best Practices
  block-scoped-var: # ある変数が、それが宣言されたブロックの外側で使われたら・・・
    - error
  curly: # ifやforにおいて{}を省略したら・・・
    - error
    - all # 常に省略不可。ifの中身が1行であっても。
  eqeqeq: # ===や!===を使わなかったら（==や!=を使ったら）・・・
    - error
  guard-for-in: # for inループの下にif (...hasOwnProperty...)がなかったら・・・
    - error
  no-else-return: # ifブロックの中にreturnがあるのに、elseブロックがあったら・・・
    - error
  no-eval: # eval()を使ったら・・・
    - error
  no-implied-eval: # setInterval()などの第一引数に文字列リテラルでコードを渡したら・・・
    - error
  radix: # parseInt()を使う時に第2引数（基数）を省略したら・・・
    - error
  
  # Variables
  no-undef: # 既知のグローバル変数を/* global ...*/というコメントで列挙していなかったら・・・
    - off # デフォルトはerrorだけどチェックしないようにする。コメントを書くのが億劫になりそうだから。
  no-unused-vars: # 使っていない変数があったら・・・
    - warn # デフォルトはerrorだけどwarnに緩める。変数を使う箇所を一時的にコメントアウトしたりした時にエラーになると面倒だから。

  # Stylistic Issues
  camelcase: # 変数名がキャメルケースでなかったら・・・
    - error
  no-lonely-if: # else ifと書けばいいのに、elseブロックの直下に唯一のifがあったら・・・
    - error
  no-nested-ternary: # 3項演算子をネストにしたら・・・
    - error

  # ECMAScript 6
  no-var: # constやletを使わずにvarを使ったら・・・
    - error
  object-shorthand: # {x, y}と書けるのに、{x: x, y: y}のように書いていたら・・・
    - error
  prefer-const: # constを使えるのに使っていなかったら・・・
    - error
  prefer-template: # テンプレートリテラルを使えるのに使っていなかったら・・・
    - error
